import { TerraformStack, TerraformElement, HttpBackendConfig, HttpBackend } from "cdktf";
import { Construct, IConstruct, Node } from "constructs";
/**
 * Options for creating a unique resource name_prefix.
 */
export interface UniqueResourceNamePrefixOptions extends UniqueResourceNameOptions {
    /**
     * Length of the random generated suffix added by some Terraform providers.
     *
     * NOTE: https://github.com/hashicorp/terraform-provider-aws/issues/625
     * @default - 26
     */
    readonly suffixLength?: number;
}
/**
 * Options for creating a unique resource name.
 */
export interface UniqueResourceNameOptions {
    /**
     * The maximum length of the unique resource name.
     *
     * @default - 256
     */
    readonly maxLength?: number;
    /**
     * The separator used between the path components.
     *
     * @default - none
     */
    readonly separator?: string;
    /**
     * Non-alphanumeric characters allowed in the unique resource name.
     *
     * @default - none
     */
    readonly allowedSpecialCharacters?: string;
    /**
     * Prefix to be added into the stack name
     *
     * @default - none
     */
    readonly prefix?: string;
    /**
     * Whether to convert the resource name to lowercase.
     *
     * @default - false
     */
    readonly lowerCase?: boolean;
}
export interface StackBaseProps {
    /**
     * TerraConstruct UUID within the grid.
     *
     * UUID is generated by the CLI and ensures resource Identity
     * is decoupled from resource tagging for consistency.
     *
     * UUID may be user provided for imported resources
     */
    readonly gridUUID: string;
    /**
     * The environment name passed in from the CLI
     */
    readonly environmentName: string;
    /**
     * Stores the state using a simple REST client.
     *
     * State will be fetched via GET, updated via POST, and purged with DELETE.
     * The method used for updating is configurable.
     *
     * This backend optionally supports state locking.
     * When locking support is enabled it will use LOCK and UNLOCK requests providing the lock info in the body.
     * The endpoint should return a 423: Locked or 409: Conflict with the holding lock info when
     * it's already taken, 200: OK for success. Any other status will be considered an error.
     * The ID of the holding lock info will be added as a query parameter to state updates requests.
     *
     * Read more about this backend in the Terraform docs:
     * https://developer.hashicorp.com/terraform/language/settings/backends/http
     */
    readonly gridBackendConfig?: HttpBackendConfig;
}
export interface IStack extends IConstruct {
    /**
     * Environment Name passed in from the CLI
     */
    readonly environmentName: string;
    readonly gridUUID: string;
    readonly gridBackend?: HttpBackend;
    resolve(obj: any, preparing?: boolean): any;
    uniqueResourceName(tfElement: TerraformElement | Node, options?: UniqueResourceNameOptions): string;
    uniqueResourceNamePrefix(tfElement: TerraformElement | Node, options?: UniqueResourceNamePrefixOptions): string;
}
/**
 * Base class for all TerraConstructs stacks
 *
 * Provides a reference to the grid UUID and environment name
 */
export declare abstract class StackBase extends TerraformStack implements IStack {
    /**
     * Return whether the given object is a Stack.
     *
     * attribute detection since as 'instanceof' potentially fails across Library releases.
     */
    static isTerraStack(x: any): x is IStack;
    /**
     * Looks up the first stack scope in which `construct` is defined. Fails if there is no stack up the tree or the stack is not an IStack.
     * @param construct The construct to start the search from.
     */
    static ofTerraConstruct(construct: IConstruct): IStack;
    /**
     * Returns a unique identifier for a construct based on its path within
     * a TerraformStack. see uniqueResourceName, but with no separator, maximum length 255 and allows
     *  "_" and "-" on top of alphanumerical characters.
     *
     * @param construct The construct
     * @returns a unique resource name based on the construct path
     */
    static uniqueId(construct: IConstruct | Node): string;
    /**
     * Stack unique grid identifier
     */
    readonly gridUUID: string;
    /**
     * Environment Name passed in from the CLI
     */
    readonly environmentName: string;
    /**
     * The grid provided backend for state storage
     */
    readonly gridBackend?: HttpBackend;
    constructor(scope: Construct, id: string, props: StackBaseProps);
    /**
     * Returns a Terraform-compatible unique identifier for a Terraform Element based
     * on its path. This function finds the stackName of the parent stack (non-nested)
     * to the construct, and the ids of the components in the construct path.
     *
     * The user can define allowed special characters, a separator between the elements,
     * and the maximum length of the resource name. The name includes a human readable portion rendered
     * from the path components, with or without user defined separators, and a hash suffix.
     * If the resource name is longer than the maximum length, it is trimmed in the middle.
     *
     * @param tfElement The construct
     * @param options Options for defining the unique resource name
     * @returns a unique resource name based on the construct path
     */
    uniqueResourceName(tfElement: TerraformElement | Node, options?: UniqueResourceNameOptions): string;
    /**
     * Returns a Terraform-compatible unique identifier for a Terraform Element based
     * on its path. This function finds the stackName of the parent stack (non-nested)
     * to the construct, and the ids of the components in the construct path.
     *
     * The user can define allowed special characters, a separator between the elements,
     * and the maximum length of the resource name. The name includes a human readable portion rendered
     * from the path components, with or without user defined separators, and depends on the
     * resource provider to generate the random suffix.
     *
     * If the resource name is longer than the maximum length - suffixLength, it is trimmed in the middle.
     *
     * @param tfElement The construct
     * @param options Options for defining the unique resource name
     * @returns a unique resource name based on the construct path
     */
    uniqueResourceNamePrefix(tfElement: TerraformElement | Node, options?: UniqueResourceNamePrefixOptions): string;
    /** Resolve IResolvable in scope of this AwsStack */
    resolve(obj: any, preparing?: boolean): any;
    /**
     * Convert an object, potentially containing tokens, to a JSON string
     */
    toJsonString(obj: any, space?: number): string;
}
