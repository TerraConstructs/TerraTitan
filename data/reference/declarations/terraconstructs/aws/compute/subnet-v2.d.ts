import { subnet as tfSubnet } from "@cdktf/provider-aws";
import { Construct, IDependable } from "constructs";
import { INetworkAcl } from "./network-acl";
import { AwsConstructBase, AwsConstructProps } from "../aws-construct";
import { IRouteTable, ISubnet, SubnetOutputs, SubnetType } from "./vpc";
import { IVpcV2 } from "./vpc-v2-base";
/**
 * Interface to define subnet CIDR
 */
interface ICidr {
    readonly cidr: string;
}
/**
 * IPv4 or IPv6 CIDR range for the subnet
 */
export declare class IpCidr implements ICidr {
    /**
     * IPv6 CIDR range for the subnet
     * Allowed only if IPv6 is enabled on VPc
     */
    readonly cidr: string;
    constructor(props: string);
}
/**
 * Properties to define subnet for VPC.
 */
export interface SubnetV2Props extends AwsConstructProps {
    /**
     * VPC Prop
     */
    readonly vpc: IVpcV2;
    /**
     * ipv4 cidr to assign to this subnet.
     * See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-cidrblock
     */
    readonly ipv4CidrBlock: IpCidr;
    /**
     * Ipv6 CIDR Range for subnet
     *
     * @default - No Ipv6 address
     */
    readonly ipv6CidrBlock?: IpCidr;
    /**
     * Custom AZ for the subnet
     */
    readonly availabilityZone: string;
    /**
     * Custom Route for subnet
     *
     * @default - a default route table created
     */
    readonly routeTable?: IRouteTable;
    /**
     * The type of Subnet to configure.
     *
     * The Subnet type will control the ability to route and connect to the
     * Internet.
     *
     * TODO: Add validation check `subnetType` when adding resources (e.g. cannot add NatGateway to private)
     */
    readonly subnetType: SubnetType;
    /**
     * Subnet name
     *
     * @default - provisioned with an autogenerated name by CDK
     */
    readonly subnetName?: string;
    /**
     * Indicates whether a network interface created in this subnet receives an IPv6 address.
     * If you specify AssignIpv6AddressOnCreation, you must also specify Ipv6CidrBlock.
     *
     * @default - undefined in case not provided as an input
     */
    readonly assignIpv6AddressOnCreation?: boolean;
}
/**
 * Interface with additional properties for SubnetV2
 */
export interface ISubnetV2 extends ISubnet {
    /**
     * The IPv6 CIDR block for this subnet
     */
    readonly ipv6CidrBlock?: string;
    /**
     * The type of subnet (public or private) that this subnet represents.
     *
     * @attribute SubnetType
     */
    readonly subnetType?: SubnetType;
}
/**
 * The SubnetV2 class represents a subnet within a VPC (Virtual Private Cloud) in AWS.
 * It extends the Resource class and implements the ISubnet interface.
 *
 * Instances of this class can be used to create and manage subnets within a VpcV2 instance.
 * Subnets can be configured with specific IP address ranges (IPv4 and IPv6), availability zones,
 * and subnet types (e.g., public, private, isolated).
 *
 * @resource AWS::EC2::Subnet
 *
 */
export declare class SubnetV2 extends AwsConstructBase implements ISubnetV2 {
    /**
     * Import an existing subnet to the VPC
     */
    static fromSubnetV2Attributes(scope: Construct, id: string, attrs: SubnetV2Attributes): ISubnetV2;
    get subnetOutputs(): SubnetOutputs;
    get outputs(): Record<string, any>;
    /**
     * The Availability Zone the subnet is located in
     */
    readonly availabilityZone: string;
    /**
     * The subnetId for this particular subnet
     * @attribute
     */
    readonly subnetId: string;
    /**
     *  Dependencies for internet connectivity
     * This Property exposes the RouteTable-Subnet association so that other resources can depend on it.
     */
    readonly internetConnectivityEstablished: IDependable;
    /**
     * The variable name `internetConnectivityEstablished` does not reflect what it actually is.
     * The naming is enforced by ISubnet. We need to keep it to maintain compatibility.
     * It exposes the RouteTable-Subnet association so that other resources can depend on it.
     * E.g. Resources in a subnet, when being deleted, may need the RouteTable to exist in order to delete properly
     */
    private readonly _internetConnectivityEstablished;
    /**
     * The IPv4 CIDR block for this subnet
     */
    readonly ipv4CidrBlock: string;
    /**
     * The IPv6 CIDR Block for this subnet
     */
    readonly ipv6CidrBlock?: string;
    /**
     * The type of subnet (public or private) that this subnet represents.
     * @attribute SubnetType
     */
    readonly subnetType?: SubnetType;
    private _networkAcl?;
    resource: tfSubnet.Subnet;
    private _routeTable;
    /**
     * Constructs a new SubnetV2 instance.
     * @param scope The parent Construct that this resource will be part of.
     * @param id The unique identifier for this resource.
     * @param props The configuration properties for the subnet.
     */
    constructor(scope: Construct, id: string, props: SubnetV2Props);
    /**
     * Associate a Network ACL with this subnet
     *
     * @param id The unique identifier for this association.
     * @param networkAcl The Network ACL to associate with this subnet.
     * This allows controlling inbound and outbound traffic for instances in this subnet.
     */
    associateNetworkAcl(id: string, networkAcl: INetworkAcl): void;
    /**
     * Return the Route Table associated with this subnet
     */
    get routeTable(): IRouteTable;
    /**
     * Returns the Network ACL associated with this subnet.
     */
    get networkAcl(): INetworkAcl | undefined;
}
/**
 * Properties required to import a subnet
 */
export interface SubnetV2Attributes {
    /**
     * The Availability Zone this subnet is located in
     *
     * @default - No AZ information, cannot use AZ selection features
     */
    readonly availabilityZone: string;
    /**
     * The IPv4 CIDR block associated with the subnet
     *
     * @default - No CIDR information, cannot use CIDR filter features
     */
    readonly ipv4CidrBlock: string;
    /**
     * The IPv4 CIDR block associated with the subnet
     *
     * @default - No CIDR information, cannot use CIDR filter features
     */
    readonly ipv6CidrBlock?: string;
    /**
     * The ID of the route table for this particular subnet
     *
     * @default - No route table information, cannot create VPC endpoints
     */
    readonly routeTableId?: string;
    /**
     * The subnetId for this particular subnet
     */
    readonly subnetId: string;
    /**
     * The type of subnet (public or private) that this subnet represents.
     */
    readonly subnetType: SubnetType;
    /**
     * Name of the given subnet
     *
     * @default - no subnet name
     */
    readonly subnetName?: string;
}
export {};
