import { vpcIpamPoolCidr as tfIpamPoolCidr } from "@cdktf/provider-aws";
import { Construct } from "constructs";
import { IAwsConstruct, AwsConstructBase } from "../aws-construct";
/**
 * Represents the address family for IP addresses in an IPAM pool.
 * IP_V4 - Represents the IPv4 address family.
 * IP_V6 - Represents the IPv6 address family.
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipampool.html#cfn-ec2-ipampool-addressfamily
 */
export declare enum AddressFamily {
    /**
     * Represents the IPv4 address family.
     * Allowed under public and private pool.
     */
    IP_V4 = "ipv4",
    /**
     * Represents the IPv6 address family.
     * Only allowed under public pool.
     */
    IP_V6 = "ipv6"
}
/**
 * The IP address source for pools in the public scope.
 * Only used for provisioning IP address CIDRs to pools in the public scope.
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipampool.html#cfn-ec2-ipampool-publicipsource
 */
export declare enum IpamPoolPublicIpSource {
    /**
     * BYOIP Ipv6 to be registered under IPAM
     */
    BYOIP = "byoip",
    /**
     * Amazon Provided Ipv6 range
     */
    AMAZON = "amazon"
}
/**
 * Limits which service in AWS that the pool can be used in
 */
export declare enum AwsServiceName {
    /**
     *  Allows users to use space for Elastic IP addresses and VPCs
     */
    EC2 = "ec2"
}
/**
 * Options to create a new Ipam in the account
 */
export interface IpamProps {
    /**
     * The operating Regions for an IPAM.
     * Operating Regions are AWS Regions where the IPAM is allowed to manage IP address CIDRs
     * For more information about operating Regions, see [Create an IPAM](https://docs.aws.amazon.com//vpc/latest/ipam/create-ipam.html) in the *Amazon VPC IPAM User Guide* .
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipam.html#cfn-ec2-ipam-operatingregions
     *
     * @default - Stack.region if defined in the stack
     */
    readonly operatingRegion?: string[];
    /**
     * Name of IPAM that can be used for tagging resource
     *
     * @default - If no name provided, no tags will be added to the IPAM
     */
    readonly ipamName?: string;
}
/**
 * Refers to two possible scope types under IPAM
 */
export declare enum IpamScopeType {
    /**
     * Default scopes created by IPAM
     */
    DEFAULT = "default",
    /**
     * Custom scope created using method
     */
    CUSTOM = "custom"
}
/**
 * Options for configuring an IPAM pool.
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipampool.html
 */
export interface PoolOptions {
    /**
     * addressFamily - The address family of the pool (ipv4 or ipv6).
     */
    readonly addressFamily: AddressFamily;
    /**
     * Information about the CIDRs provisioned to the pool.
     *
     * @default - No CIDRs are provisioned
     */
    readonly ipv4ProvisionedCidrs?: string[];
    /**
     * The locale (AWS Region) of the pool. Should be one of the IPAM operating region.
     *  Only resources in the same Region as the locale of the pool can get IP address allocations from the pool.
     * You can only allocate a CIDR for a VPC, for example, from an IPAM pool that shares a locale with the VPCâ€™s Region.
     * Note that once you choose a Locale for a pool, you cannot modify it. If you choose an AWS Region for locale that has not been configured as an operating Region for the IPAM, you'll get an error.
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipampool.html#cfn-ec2-ipampool-locale
     *
     * @default - Current operating region of IPAM
     */
    readonly locale?: string;
    /**
     * The IP address source for pools in the public scope.
     * Only used for IPv6 address
     * Only allowed values to this are 'byoip' or 'amazon'
     *
     * @default amazon
     */
    readonly publicIpSource?: IpamPoolPublicIpSource;
    /**
     * Limits which service in AWS that the pool can be used in.
     *
     * "ec2", for example, allows users to use space for Elastic IP addresses and VPCs.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipampool.html#cfn-ec2-ipampool-awsservice
     *
     * @default - required in case of an IPv6, throws an error if not provided.
     */
    readonly awsService?: AwsServiceName;
    /**
     * IPAM Pool resource name to be used for tagging
     *
     * @default - autogenerated by CDK if not provided
     */
    readonly ipamPoolName?: string;
}
/**
 * Options to provision CIDRs to an IPAM pool.
 * Used to create a new IpamPoolCidr
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipampoolcidr.html
 */
export interface IpamPoolCidrProvisioningOptions {
    /**
     * Ipv6 Netmask length for the CIDR
     *
     * @default - pool provisioned without netmask length, need cidr range in this case
     */
    readonly netmaskLength?: number;
    /**
     * Ipv6 CIDR block for the IPAM pool
     *
     * @default - pool provisioned without netmask length, need netmask length in this case
     */
    readonly cidr?: string;
}
/**
 * Outputs which may be registered for output via the Grid.
 */
export interface IpamPoolOutputs {
    /**
     * Pool ID to be passed to the VPC construct
     * @attribute IpamPoolId
     */
    readonly ipamPoolId: string;
}
/**
 * Definition used to add or create a new IPAM pool
 */
export interface IIpamPool extends IAwsConstruct {
    /** strongly typed outputs */
    readonly ipamPoolOutputs: IpamPoolOutputs;
    /**
     * Pool ID to be passed to the VPC construct
     * @attribute IpamPoolId
     */
    readonly ipamPoolId: string;
    /**
     * Pool CIDR for IPv6 to be provisioned with Public IP source set to 'Amazon'
     */
    readonly ipamCidrs: tfIpamPoolCidr.VpcIpamPoolCidr[];
    /**
     * Pool CIDR for IPv4 to be provisioned using IPAM
     * Required to check for subnet IP range is within the VPC range
     */
    readonly ipamIpv4Cidrs?: string[];
    /**
     * Function to associate a IPv6 address with IPAM pool
     */
    provisionCidr(id: string, options: IpamPoolCidrProvisioningOptions): tfIpamPoolCidr.VpcIpamPoolCidr;
}
/**
 * Being used in IPAM class to add pools to default scope created by IPAM.
 */
export interface IpamScopeOptions {
    /**
     * IPAM scope name that will be used for tagging
     *
     * @default - no tags will be added to the scope
     */
    readonly ipamScopeName?: string;
}
/**
 * Options for configuring an IP Address Manager (IPAM).
 *
 * For more information, see the {@link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipam.html}.
 */
export interface IpamOptions {
    /**
     * CIDR Mask for Vpc
     * Only required when using AWS Ipam
     *
     * @default - no netmask length for IPAM attached to VPC secondary address
     */
    readonly netmaskLength?: number;
    /**
     * Ipv4 or an Ipv6 IPAM pool
     * Only required when using AWS Ipam
     *
     * @default - no pool attached to VPC secondary address
     */
    readonly ipamPool?: IIpamPool;
    /**
     * Required to set Secondary cidr block resource name
     * in order to generate unique logical id for the resource.
     */
    readonly cidrBlockName: string;
}
/**
 * Outputs which may be registered for output via the Grid.
 */
export interface IpamScopeOutputs {
    /**
     * Scope ID to be passed to the VPC construct
     * @attribute IpamScopeId
     */
    readonly ipamScopeId: string;
}
/**
 * Interface for IpamScope Class
 */
export interface IIpamScopeBase {
    /** strongly typed outputs */
    readonly ipamScopeOutputs: IpamScopeOutputs;
    /**
     * Reference to the current scope of stack to be passed in order to create
     * a new IPAM pool
     */
    readonly scope: Construct;
    /**
     * Default Scope ids created by the IPAM or a new Resource id
     */
    readonly scopeId: string;
    /**
     * Defines scope type can be either default or custom
     */
    readonly scopeType?: IpamScopeType;
    /**
     * Function to add a new pool to an IPAM scope
     */
    addPool(id: string, options: PoolOptions): IIpamPool;
}
export interface IpamOutputs {
    /**
     * Ipam ID to be passed to the VPC construct
     * @attribute IpamId
     */
    readonly ipamId: string;
}
/**
 * Creates new IPAM with default public and private scope
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipamscope.html
 * @see https://registry.terraform.io/providers/hashicorp/aws/5.68.0/docs/resources/vpc_ipam
 * @resource aws_vpc_ipam
 */
export declare class Ipam extends AwsConstructBase {
    get ipamOutputs(): IpamOutputs;
    get outputs(): Record<string, any>;
    /**
     * Provides access to default public IPAM scope through add pool method.
     * Usage: To add an Ipam Pool to a default public scope
     * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipamscope.html
     */
    readonly publicScope: IIpamScopeBase;
    /**
     * Provides access to default private IPAM scope through add pool method.
     * Usage: To add an Ipam Pool to a default private scope
     * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ipamscope.html
     * */
    readonly privateScope: IIpamScopeBase;
    private readonly _ipam;
    /**
     * Access to Ipam resource id that can be used later to add a custom private scope to this IPAM
     * @attribute IpamId
     */
    readonly ipamId: string;
    /**
     * List of operating regions for IPAM
     */
    readonly operatingRegions: string[];
    /**
     * List of scopes created under this IPAM
     */
    readonly scopes: IIpamScopeBase[];
    /**
     * IPAM name to be used for tagging
     * @default no tag specified
     * @attribute IpamName
     */
    readonly ipamName?: string;
    constructor(scope: Construct, id: string, props?: IpamProps);
    /**
     * Function to add custom scope to an existing IPAM
     * Custom scopes can only be private
     */
    addScope(scope: Construct, id: string, options: IpamScopeOptions): IIpamScopeBase;
}
