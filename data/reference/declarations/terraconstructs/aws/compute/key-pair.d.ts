import { keyPair as tfKeyPair } from "@cdktf/provider-aws";
import { Construct } from "constructs";
import { OperatingSystemType } from "./machine-image";
import { AwsConstructBase, AwsConstructProps, IAwsConstruct } from "../aws-construct";
import { IStringParameter } from "../storage/parameter";
/**
 * The type of the key pair.
 */
export declare enum KeyPairType {
    /**
     * An RSA key.
     */
    RSA = "rsa",
    /**
     * An ED25519 key.
     *
     * Note that ED25519 keys are not supported for Windows instances.
     */
    ED25519 = "ed25519"
}
/**
 * The properties of a Key Pair
 */
export interface KeyPairProps extends AwsConstructProps {
    /**
     * A unique name for the key pair.
     *
     * @default A generated name
     */
    readonly keyPairName?: string;
    /**
     * Creates a unique name beginning with the specified prefix.
     *
     * Conflicts with `keyPairName`. If neither `keyPairName` nor `keyPairNamePrefix` is provided,
     * TerraConstructs will create a unique key name using the `gridUUID` as prefix.
     *
     * @default A generated name
     */
    readonly keyPairNamePrefix?: string;
    /**
     * The type of key pair.
     *
     * @default RSA (ignored if keyMaterial is provided)
     */
    readonly type?: KeyPairType;
    /**
     * The public key material.
     *
     * If this is provided the key is considered "imported". For imported
     * keys, it is assumed that you already have the private key material
     * so the private key material will not be returned or stored in
     * AWS Systems Manager Parameter Store.
     *
     * The private key generated by this resource will be stored unencrypted
     * in your Terraform state file.
     *
     * Omitting the publicKeyMaterial for production deployments is not recommended.
     * Instead, generate a private key file outside of Terraform and distribute it
     * securely to the system where Terraform will be run.
     *
     * @default a public and private key will be generated
     */
    readonly publicKeyMaterial?: string;
}
/**
 * Outputs which may be registered for output via the Grid.
 */
export interface KeyPairOutputs {
    /**
     * The unique name of the key pair.
     */
    readonly keyPairName: string;
    /**
     * The type of the key pair.
     *
     * @default no type specified
     */
    readonly type?: KeyPairType;
}
/**
 * Attributes of a Key Pair.
 */
export interface KeyPairAttributes {
    /**
     * The unique name of the key pair.
     */
    readonly keyPairName: string;
    /**
     * The type of the key pair.
     *
     * @default no type specified
     */
    readonly type?: KeyPairType;
}
/**
 * An EC2 Key Pair.
 */
export interface IKeyPair extends IAwsConstruct {
    /** Strongly typed outputs */
    readonly keyPairOutputs: KeyPairOutputs;
    /**
     * The name of the key pair.
     *
     * @attribute
     */
    readonly keyPairName: string;
    /**
     * The type of the key pair.
     */
    readonly type?: KeyPairType;
    /**
     * Used internally to determine whether the key pair is compatible with an OS type.
     *
     * @internal
     */
    _isOsCompatible(osType: OperatingSystemType): boolean;
}
/**
 * An EC2 Key Pair.
 *
 * @resource AWS::EC2::KeyPair
 */
export declare class KeyPair extends AwsConstructBase implements IKeyPair {
    /**
     * Imports a key pair based on the name.
     */
    static fromKeyPairName(scope: Construct, id: string, keyPairName: string): IKeyPair;
    /**
     * Imports a key pair with a name and optional type.
     */
    static fromKeyPairAttributes(scope: Construct, id: string, attrs: KeyPairAttributes): IKeyPair;
    get keyPairOutputs(): KeyPairOutputs;
    get outputs(): Record<string, any>;
    /**
     * The unique name of the key pair.
     *
     * @attribute
     */
    readonly keyPairName: string;
    /**
     * The fingerprint of the key pair.
     *
     * @attribute
     */
    readonly keyPairFingerprint: string;
    /**
     * The unique ID of the key pair.
     *
     * @attribute
     */
    readonly keyPairId: string;
    /**
     * The type of the key pair.
     */
    readonly type?: KeyPairType;
    private _privateKey?;
    private _privateKeySsm?;
    private readonly _isImport;
    readonly resource: tfKeyPair.KeyPair;
    constructor(scope: Construct, id: string, props?: KeyPairProps);
    /**
     * Whether the key material was imported.
     *
     * Keys with imported material do not have their private key material stored
     * or returned automatically.
     */
    get hasImportedMaterial(): boolean;
    /**
     * The Systems Manager Parameter Store parameter with the pair's private key material.
     */
    get privateKey(): IStringParameter;
    /**
     * Used internally to determine whether the key pair is compatible with an OS type.
     *
     * @internal
     */
    _isOsCompatible(osType: OperatingSystemType): boolean;
}
